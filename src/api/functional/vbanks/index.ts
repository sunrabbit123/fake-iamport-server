/**
 * @packageDocumentation
 * @module api.functional.vbanks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia 
 */
//================================================================
import { Fetcher } from "@nestia/fetcher";
import type { IConnection, Primitive } from "@nestia/fetcher";
import typia from "typia";

import { NestiaSimulator } from "./../../utils/NestiaSimulator";
import type { IIamportVBankPayment } from "./../../structures/IIamportVBankPayment";
import type { IIamportResponse } from "./../../structures/IIamportResponse";

/**
 * 가상 계좌 발급하기.
 * 
 * @param input 가상 계좌 입력 정보
 * @returns 가상 계좌 결제 정보
 * @security bearer
 * @author Jeongho Nam - https://github.com/samchon
 * 
 * @controller FakeIamportVbanksController.store()
 * @path POST /vbanks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function store(
    connection: IConnection,
    input: store.Input,
): Promise<store.Output> {
    return !!connection.simulate
        ? store.simulate(
              connection,
              input,
          )
        : Fetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              store.ENCRYPTED,
              store.METHOD,
              store.path(),
              input,
          );
}
export namespace store {
    export type Input = Primitive<IIamportVBankPayment.IStore>;
    export type Output = Primitive<IIamportResponse<IIamportVBankPayment>>;

    export const METHOD = "POST" as const;
    export const PATH: string = "/vbanks";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/vbanks`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        input: store.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}

/**
 * 가상 계좌 편집하기.
 * 
 * @param input 가상 계좌 편집 입력 정보
 * @returns 편집된 가상 계좌 결제 정보
 * @security bearer
 * @author Jeongho Nam - https://github.com/samchon
 * 
 * @controller FakeIamportVbanksController.update()
 * @path PUT /vbanks
 * @nestia Generated by Nestia - https://github.com/samchon/nestia
 */
export async function update(
    connection: IConnection,
    input: update.Input,
): Promise<update.Output> {
    return !!connection.simulate
        ? update.simulate(
              connection,
              input,
          )
        : Fetcher.fetch(
              {
                  ...connection,
                  headers: {
                      ...(connection.headers ?? {}),
                      "Content-Type": "application/json",
                  },
              },
              update.ENCRYPTED,
              update.METHOD,
              update.path(),
              input,
          );
}
export namespace update {
    export type Input = Primitive<IIamportVBankPayment.IUpdate>;
    export type Output = Primitive<IIamportResponse<IIamportVBankPayment>>;

    export const METHOD = "PUT" as const;
    export const PATH: string = "/vbanks";
    export const ENCRYPTED: Fetcher.IEncrypted = {
        request: false,
        response: false,
    };

    export const path = (): string => {
        return `/vbanks`;
    }
    export const random = (g?: Partial<typia.IRandomGenerator>): Output =>
        typia.random<Output>(g);
    export const simulate = async (
        connection: IConnection,
        input: update.Input,
    ): Promise<Output> => {
        const assert = NestiaSimulator.assert({
            method: METHOD,
            host: connection.host,
            path: path()
        });
        assert.body(() => typia.assert(input));
        return random(
            typeof connection.simulate === 'object' &&
                connection.simulate !== null
                ? connection.simulate
                : undefined
        );
    }
}